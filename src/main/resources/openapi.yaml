openapi: 3.0.3
info:
  title: Manage clients
  description: :)
  version: 1.0.0
servers:
  - url: /api/v1
    description: Generated server url

tags:
  - name: Registration
  - name: Authorization
  - name: Client
  - name: Job
  - name: Position

paths:
   /clients:
    get:
      summary: 'Get all clients'
      description: 'Get a list of all clients stored in the system'
      operationId: getAllClients
      tags:
        - Client
      parameters:
        - in: query
          name: pageRequest
          schema:
            $ref: '#/components/schemas/PageableRequest'
          required: true
        - in: query
          name: searchCriteria
          schema:
            $ref: '#/components/schemas/SearchCriteria'
          required: true
      responses:
        '200':
          description: 'All clients are returned'
          content:
             application/json:
               schema:
                 $ref: '#/components/schemas/ClientPageResponseDto'

#    post:
#      summary: 'Create a new client'
#      description: 'Create a new client using ClientRequestDto'
#      operationId: saveClient
#      tags:
#        - Client
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/ClientRequestDto'
#        required: true
#      responses:
#        '201':
#          description: 'Client has been created successfully'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/ClientResponseDto'


   /clients/{clientId}:
    get:
      summary: 'Get a single client'
      description: 'Get a client by its id'
      operationId: getClient
      tags:
        - Client
      parameters:
        - in: path
          name: clientId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: 'Client id'
      responses:
        '200':
          description: 'Client information is returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponseDto'

    put:
      summary: 'Update a client'
      description: 'Update an existing client by its id using ClientRequestDto'
      operationId: updateClient
      tags:
        - Client
      parameters:
        - in: path
          name: clientId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: 'Client id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequestDto'
        required: true
      responses:
        '200':
          description: 'Client has been updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponseDto'

    delete:
      summary: 'Delete a client'
      description: 'Delete an existing client by its id'
      operationId: deleteClient
      tags:
        - Client
      parameters:
        - in: path
          name: clientId
          schema:
            $ref: '#/components/schemas/UUID'
          required: true
          description: 'Client id'
      responses:
        '200':
          description: 'Client has been deleted successfully'

   /registration:
     post:
       summary: 'Create a new client'
       description: 'Create a new client using RegistrationRequestDto'
       operationId: registerClient
       tags:
         - Registration
       requestBody:
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/RegistrationRequestDto'
         required: true
       responses:
         '201':
           description: 'Client is registered successfully'
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/ClientResponseDto'

   /authorization/login:
     post:
       summary: 'Authorization'
       description: 'Authorization using email and password'
       operationId: authorizeClient
       tags:
         - Authorization
       requestBody:
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/AuthorizationRequestDto'
         required: true
       responses:
         '200':
           description: 'Client is authorized successfully'
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/AuthorizationResponseDto'

   /jobs:
     get:
       summary: 'Get all jobs'
       description: 'Get a list of all jobs stored in the system'
       operationId: getAllJobs
       tags:
         - Job
       responses:
         '200':
           description: 'All jobs are returned'
           content:
             application/json:
               schema:
                 type: array
                 items:
                   $ref: '#/components/schemas/JobResponseDto'

     post:
       summary: 'Create a new job'
       description: 'Create a new job using JobRequestDto'
       operationId: saveJob
       tags:
         - Job
       requestBody:
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/JobRequestDto'
         required: true
       responses:
         '201':
           description: 'Position has been created successfully'
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/JobResponseDto'


   /jobs/{jobId}:
     get:
       summary: 'Get a single job'
       description: 'Get a job by its id'
       operationId: getJob
       tags:
         - Job
       parameters:
         - in: path
           name: jobId
           schema:
             $ref: '#/components/schemas/UUID'
           required: true
           description: 'Job id'
       responses:
         '200':
           description: 'Job information is returned'
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/JobResponseDto'

     put:
       summary: 'Update a job'
       description: 'Update an existing job by its id using JobRequestDto'
       operationId: updateJob
       tags:
         - Job
       parameters:
         - in: path
           name: jobId
           schema:
             $ref: '#/components/schemas/UUID'
           required: true
           description: 'Job id'
       requestBody:
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/JobRequestDto'
         required: true
       responses:
         '200':
           description: 'Job has been updated successfully'
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/JobResponseDto'

     delete:
       summary: 'Delete a job'
       description: 'Delete an existing job by its id'
       operationId: deleteJob
       tags:
         - Job
       parameters:
         - in: path
           name: jobId
           schema:
             $ref: '#/components/schemas/UUID'
           required: true
           description: 'Job id'
       responses:
         '200':
           description: 'Job has been deleted successfully'




















   /positions:
     get:
       summary: 'Get all positions'
       description: 'Get a list of all positions stored in the system'
       operationId: getAllPositions
       tags:
         - Position
       responses:
         '200':
           description: 'All positions are returned'
           content:
             application/json:
               schema:
                 type: array
                 items:
                   $ref: '#/components/schemas/PositionResponseDto'

     post:
       summary: 'Create a new position'
       description: 'Create a new position using PositionRequestDto'
       operationId: savePosition
       tags:
         - Position
       requestBody:
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/PositionRequestDto'
         required: true
       responses:
         '201':
           description: 'Job has been created successfully'
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/PositionResponseDto'


   /positions/{positionId}:
     get:
       summary: 'Get a single position'
       description: 'Get a position by its id'
       operationId: getPosition
       tags:
         - Position
       parameters:
         - in: path
           name: positionId
           schema:
             $ref: '#/components/schemas/UUID'
           required: true
           description: 'Position id'
       responses:
         '200':
           description: 'Job information is returned'
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/PositionResponseDto'

     put:
       summary: 'Update a position'
       description: 'Update an existing position by its id using PositionRequestDto'
       operationId: updatePosition
       tags:
         - Position
       parameters:
         - in: path
           name: positionId
           schema:
             $ref: '#/components/schemas/UUID'
           required: true
           description: 'Position id'
       requestBody:
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/PositionRequestDto'
         required: true
       responses:
         '200':
           description: 'Position has been updated successfully'
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/PositionResponseDto'

     delete:
       summary: 'Delete a position'
       description: 'Delete an existing position by its id'
       operationId: deletePosition
       tags:
         - Position
       parameters:
         - in: path
           name: positionId
           schema:
             $ref: '#/components/schemas/UUID'
           required: true
           description: 'Position id'
       responses:
         '200':
           description: 'Position has been deleted successfully'



security:
  - bearerAuth: [ ]

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      in: header
      name: Authorization

  schemas:
    RegistrationRequestDto:
      type: object
      properties:
        password:
          type: string
          example: 'Example@11'
      allOf:
        - $ref: '#/components/schemas/ClientRequestDto'
      required:
        - password

    AuthorizationRequestDto:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
          example: 'Example@11'
      required:
        - email
        - password

    AuthorizationResponseDto:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        token:
          type: string
          description: "Jwt token used to access the system"

    ClientRequestDto:
      type: object
      properties:
        firstName:
          type: string
          minLength: 2
          maxLength: 50
          example: 'Vadzim'
        lastName:
          type: string
          minLength: 2
          maxLength: 50
          example: 'Beliayeu'
        email:
          $ref: '#/components/schemas/Email'
        gender:
          $ref: '#/components/schemas/Gender'
      required:
        - lastName
        - firstName
        - email

    ClientResponseDto:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        lastName:
          type: string
        firstName:
          type: string
        email:
          type: string
        gender:
          $ref: '#/components/schemas/Gender'
        positions:
          type: array
          items:
            $ref: '#/components/schemas/PositionResponseDto'
      required:
        - id
        - lastName
        - firstName
        - email
        - gender

    JobRequestDto:
      type: object
      properties:
        name:
          type: string
          maxLength: 50
          minLength: 1
      required:
        - name

    JobResponseDto:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
        positions:
          type: array
          items:
            $ref: '#/components/schemas/PositionResponseDto'
      required:
        - id
        - name


    PositionRequestDto:
      type: object
      properties:
        name:
          type: string
          maxLength: 50
          minLength: 1
        jobIds:
          type: array
          items:
            $ref: '#/components/schemas/UUID'
      required:
        - jobIds
        - name

    PositionResponseDto:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/JobResponseDto'
      required:
        - id
        - name

    Gender:
      type: string
      description: "Biological gender: 'Male' or 'Female' without quotes"
      enum:
        - Male
        - Female
      example: Male

    UUID:
      type: string
      description: 'Universal Unique Identifier'
      pattern: '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
      example: 'c7b7c414-99be-11ee-b9d1-0242ac120002'

    Email:
      type: string
      example: 'examplemail@gmail.com'
      pattern: '^[A-Za-z0-9._-]+@[A-Za-z0-9.-]+\.[A-Za-z]{1,}$'
      x-pattern-message: 'Invalid email'
      minLength: 7
      maxLength: 50

    PageableRequest:
      type: object
      properties:
        pageNumber:
          $ref: '#/components/schemas/Page'
        pageSize:
          $ref: '#/components/schemas/Size'
      required:
        - pageNumber
        - pageSize

    ClientPageResponseDto:
      properties:
        pageNumber:
           $ref: '#/components/schemas/Page'
        elementsPerPage:
           type: integer
        totalPages:
           type: integer
        totalElements:
           type: integer
        content:
           type: array
           items:
             $ref: '#/components/schemas/ClientResponseDto'


    Page:
      type: integer
      description: 'Page number'
      minLength: 1
      example: 1

    Size:
      type: integer
      description: 'The number of elements per page'
      minLength: 10
      maxLength: 50
      example: 10

    SearchCriteria:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string

    ApplicationExceptionResponseDto:
      type: object
      properties:
        statusCode:
          type: integer
          description: 'Response status code'
          example: '400'
        message:
          type: string
          description: 'Code message'
          example: 'Bad Request'
        exceptionMessage:
          type: string
          description: 'Exception message'
          example: 'Message'
        timestamp:
          type: string
          format: date-time
          description: 'Date and time'
          example: '2020-01-01T00:00:00Z'
